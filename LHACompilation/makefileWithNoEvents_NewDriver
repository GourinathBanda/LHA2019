# makefile for generating the lha specification (lha*.pl), its corresponding annotation (lha*.pl.ann) , and the eventual
# specialized lha specification (lha*.spec)

TokenizedFile=$(INPUTLHAFILE)New.tokenized
TargetLhaWithOutDriver=$(INPUTLHAFILE)New.generated
TargetLhaWithDriver=$(INPUTLHAFILE)New.pl
TargetLhaWithOutDriverAnnotation=$(INPUTLHAFILE)New.generated.ann
TargetLhaWithDriverAnnotation=$(INPUTLHAFILE)New.pl.ann
LhaSpecificationAsSpecializedEmulator=$(INPUTLHAFILE)New.spec

$LhaSpecificationAsSpecializedEmulator: $(TargetLhaWithDriver) $(TargetLhaWithDriverAnnotation)
	logen $(TargetLhaWithDriver) go > $(LhaSpecificationAsSpecializedEmulator)

debug1: echo nothing

$(TargetLhaWithDriver): lhaDriverNew.pl $(TargetLhaWithOutDriver)
	cat lhaDriverNew.pl $(TargetLhaWithOutDriver) > $(TargetLhaWithDriver)

$(TargetLhaWithDriverAnnotation): lhaDriverNew.pl.ann $(TargetLhaWithOutDriverAnnotation) lhaSystem.filters
	echo ":- module('`basename $(INPUTLHAFILE)New`',_)." > moduleHeaderInserterFile.temp
	cat moduleHeaderInserterFile.temp lhaDriverNew.pl.ann \
			$(TargetLhaWithOutDriverAnnotation) lhaSystem.filters > $(TargetLhaWithDriverAnnotation)
	rm -f moduleHeaderInserterFile.temp


$(TargetLhaWithOutDriverAnnotation): lha_dcgAnn $(TokenizedFile)
	./lha_dcgAnn $(TokenizedFile) $(TargetLhaWithOutDriverAnnotation)

$(TargetLhaWithOutDriver): lha_dcg $(TokenizedFile)
	./lha_dcg $(TokenizedFile) $(TargetLhaWithOutDriver)	
	

lha_dcgAnn: lha_dcgAnn.pl lhaGenSpecAnn.pl
	ciaoc lha_dcgAnn

lha_dcg: lha_dcg.pl lhaGenSpec.pl
	ciaoc lha_dcg


$(TokenizedFile): $(INPUTLHAFILE) LHAParser.class
	java LHAParser < $(INPUTLHAFILE) > $(TokenizedFile)

jtb.out.jj: lha.jj
	jtb -ns MyNode -f lha.jj

LHAParser.java: jtb.out.jj
	javacc jtb.out.jj

LHAParser.class: LHAParser.java
	javac *.java


lha_dcg.pl lhaGenSpec.pl lha_dcgAnn.pl lhaGenSpecAnn.pl:
	

lhaDriverNew.pl lha.jj lhaDriverNew.pl.ann lhaSystem.filters $(INPUTLHAFILE):
	

# ./generateParser4LhaWithoutEvents
