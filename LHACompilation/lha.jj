PARSER_BEGIN(LHAParser)

import syntaxtree.*;
import visitor.*;

class LHAParser {
  public static void main(String args[]) {
    //System.out.println("Reading from standard input...");
    LHAParser t = new LHAParser(System.in);
    try {
       LHA l = t.LHA();
       TokenVisitor v = new TokenVisitor();
       l.accept(v);
       // l.XMLVisit("");
       //System.out.println("Parsed successfully");
       
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(LHAParser)


SKIP :
{ " " | "\t" | "\n" | "\r" }

TOKEN : 
{ 
  <TYPE : <BOOL> | <NUMERIC> | <ENUMERATED> > |<#BOOL : "bool" > |
  <#NUMERIC : "numeric" > |
  <#ENUMERATED : "enumerated"> |
  <VARIABLE : "variable"> |
  <RATE : "rate"> |
  <INIT : "init"> |
  <LOCATION : "location"> |
  <TRANSITION : "transition"> |
  <LBRACE : "(" > |
  <RBRACE : ")" > |
  <COMMA : "," > |
  <FULLSTOP : "." > |
  <ASSIGN : ":=" > |
  <ANDOR : "&" | "|" > |
  <SIGN : "-" | "+" > |
  <BINARYRELATION : "==" | "<" | "=<" | ">" | ">=" > |
  <RATERELATION : "=" | "<" | "=<" | ">" | ">=" >
}

TOKEN : /* LITERALS */
{
  < NUMBER: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
  |
  < DECIMALNUMBER: <NUMBER> <FULLSTOP> <NUMBER>  >
}

TOKEN : /* IDENTIFIERS */
{
  
< LOCATIONID: "loc_" <NUMBER> >
|
< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      (["A"-"Z"] | ["a"-"z"] | "_")
      
  >
|
  < #DIGIT:
      ["0"-"9"]    
  >
}

SPECIAL_TOKEN : 
{
  <SINGLE_LINE_COMMENT: "%" ([" "-"~"] )* ("\n" | "\r" | "\r\n") > 
}

void LHA() :
{ }
{(<TYPE> |
  <VARIABLE> |
  <RATE> |
  <INIT> |
  <LOCATION> |
  <TRANSITION > |
  <LBRACE> |
  <RBRACE> |
  <COMMA> |
  <FULLSTOP> |
  <ANDOR> |
  <ASSIGN> |
  <SIGN> |
  <BINARYRELATION> |
  <RATERELATION> |
  <NUMBER> |
  <DECIMALNUMBER> |
  <LOCATIONID> |
  <IDENTIFIER> )*
  
  <EOF>
}


