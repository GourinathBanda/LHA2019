//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(LHAParser)
import syntaxtree.*;
import visitor.*;
import java.util.Vector;


class LHAParser 
{
   public static void main(String args[])
   {
      LHAParser t = new LHAParser(System.in);
      try
      {
         LHA l = t.LHA();
         TokenVisitor v = new TokenVisitor();
         l.accept(v);
      }
      catch (Exception e)
      {
         System.out.println("Oops.");
         System.out.println(e.getMessage());
         e.printStackTrace();
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(LHAParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
}

TOKEN :
{
   <TYPE: <BOOL> | <NUMERIC> | <ENUMERATED>>
   | <#BOOL: "bool">
   | <#NUMERIC: "numeric">
   | <#ENUMERATED: "enumerated">
   | <VARIABLE: "variable">
   | <RATE: "rate">
   | <INIT: "init">
   | <LOCATION: "location">
   | <TRANSITION: "transition">
   | <LBRACE: "(">
   | <RBRACE: ")">
   | <COMMA: ",">
   | <FULLSTOP: ".">
   | <ASSIGN: ":=">
   | <ANDOR: "&" | "|">
   | <SIGN: "-" | "+">
   | <BINARYRELATION: "==" | "<" | "=<" | ">" | ">=">
   | <RATERELATION: "=" | "<" | "=<" | ">" | ">=">
}

TOKEN :
{
   <NUMBER: (["1"-"9"] (["0"-"9"])* | "0")>
   | <DECIMALNUMBER: <NUMBER> <FULLSTOP> <NUMBER>>
}

TOKEN :
{
   <LOCATIONID: "loc_" <NUMBER>>
   | <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: (["A"-"Z"] | ["a"-"z"] | "_")>
   | <#DIGIT: ["0"-"9"]>
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "%" ([" "-"~"])* ("\n" | "\r" | "\r\n")>
}

LHA LHA() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;

   
}
{
   (
      (
         n3=<TYPE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<VARIABLE> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<RATE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      |
         n9=<INIT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n1 = new NodeChoice(n8, 3); }
      |
         n11=<LOCATION> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n1 = new NodeChoice(n10, 4); }
      |
         n13=<TRANSITION> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n1 = new NodeChoice(n12, 5); }
      |
         n15=<LBRACE> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n1 = new NodeChoice(n14, 6); }
      |
         n17=<RBRACE> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n1 = new NodeChoice(n16, 7); }
      |
         n19=<COMMA> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n1 = new NodeChoice(n18, 8); }
      |
         n21=<FULLSTOP> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n1 = new NodeChoice(n20, 9); }
      |
         n23=<ANDOR> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n1 = new NodeChoice(n22, 10); }
      |
         n25=<ASSIGN> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n1 = new NodeChoice(n24, 11); }
      |
         n27=<SIGN> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n1 = new NodeChoice(n26, 12); }
      |
         n29=<BINARYRELATION> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n1 = new NodeChoice(n28, 13); }
      |
         n31=<RATERELATION> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n1 = new NodeChoice(n30, 14); }
      |
         n33=<NUMBER> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n1 = new NodeChoice(n32, 15); }
      |
         n35=<DECIMALNUMBER> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n1 = new NodeChoice(n34, 16); }
      |
         n37=<LOCATIONID> { n36 = JTBToolkit.makeNodeToken(n37); }
         { n1 = new NodeChoice(n36, 17); }
      |
         n39=<IDENTIFIER> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n1 = new NodeChoice(n38, 18); }
      )
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n41=<EOF> { 
      n41.beginColumn++; n41.endColumn++;
      n40 = JTBToolkit.makeNodeToken(n41);
   }
   
   { return new LHA(n0,n40); }
}
