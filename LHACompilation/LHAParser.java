/* Generated By:JavaCC: Do not edit this line. LHAParser.java */
import syntaxtree.*;
import visitor.*;
import java.util.Vector;


class LHAParser implements LHAParserConstants {
   public static void main(String args[])
   {
      LHAParser t = new LHAParser(System.in);
      try
      {
         LHA l = t.LHA();
         TokenVisitor v = new TokenVisitor();
         l.accept(v);
      }
      catch (Exception e)
      {
         System.out.println("Oops.");
         System.out.println(e.getMessage());
         e.printStackTrace();
      }
   }

  static final public LHA LHA() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
      case VARIABLE:
      case RATE:
      case INIT:
      case LOCATION:
      case TRANSITION:
      case LBRACE:
      case RBRACE:
      case COMMA:
      case FULLSTOP:
      case ASSIGN:
      case ANDOR:
      case SIGN:
      case BINARYRELATION:
      case RATERELATION:
      case NUMBER:
      case DECIMALNUMBER:
      case LOCATIONID:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        n3 = jj_consume_token(TYPE);
                     n2 = JTBToolkit.makeNodeToken(n3);
           n1 = new NodeChoice(n2, 0);
        break;
      case VARIABLE:
        n5 = jj_consume_token(VARIABLE);
                         n4 = JTBToolkit.makeNodeToken(n5);
           n1 = new NodeChoice(n4, 1);
        break;
      case RATE:
        n7 = jj_consume_token(RATE);
                     n6 = JTBToolkit.makeNodeToken(n7);
           n1 = new NodeChoice(n6, 2);
        break;
      case INIT:
        n9 = jj_consume_token(INIT);
                     n8 = JTBToolkit.makeNodeToken(n9);
           n1 = new NodeChoice(n8, 3);
        break;
      case LOCATION:
        n11 = jj_consume_token(LOCATION);
                          n10 = JTBToolkit.makeNodeToken(n11);
           n1 = new NodeChoice(n10, 4);
        break;
      case TRANSITION:
        n13 = jj_consume_token(TRANSITION);
                            n12 = JTBToolkit.makeNodeToken(n13);
           n1 = new NodeChoice(n12, 5);
        break;
      case LBRACE:
        n15 = jj_consume_token(LBRACE);
                        n14 = JTBToolkit.makeNodeToken(n15);
           n1 = new NodeChoice(n14, 6);
        break;
      case RBRACE:
        n17 = jj_consume_token(RBRACE);
                        n16 = JTBToolkit.makeNodeToken(n17);
           n1 = new NodeChoice(n16, 7);
        break;
      case COMMA:
        n19 = jj_consume_token(COMMA);
                       n18 = JTBToolkit.makeNodeToken(n19);
           n1 = new NodeChoice(n18, 8);
        break;
      case FULLSTOP:
        n21 = jj_consume_token(FULLSTOP);
                          n20 = JTBToolkit.makeNodeToken(n21);
           n1 = new NodeChoice(n20, 9);
        break;
      case ANDOR:
        n23 = jj_consume_token(ANDOR);
                       n22 = JTBToolkit.makeNodeToken(n23);
           n1 = new NodeChoice(n22, 10);
        break;
      case ASSIGN:
        n25 = jj_consume_token(ASSIGN);
                        n24 = JTBToolkit.makeNodeToken(n25);
           n1 = new NodeChoice(n24, 11);
        break;
      case SIGN:
        n27 = jj_consume_token(SIGN);
                      n26 = JTBToolkit.makeNodeToken(n27);
           n1 = new NodeChoice(n26, 12);
        break;
      case BINARYRELATION:
        n29 = jj_consume_token(BINARYRELATION);
                                n28 = JTBToolkit.makeNodeToken(n29);
           n1 = new NodeChoice(n28, 13);
        break;
      case RATERELATION:
        n31 = jj_consume_token(RATERELATION);
                              n30 = JTBToolkit.makeNodeToken(n31);
           n1 = new NodeChoice(n30, 14);
        break;
      case NUMBER:
        n33 = jj_consume_token(NUMBER);
                        n32 = JTBToolkit.makeNodeToken(n33);
           n1 = new NodeChoice(n32, 15);
        break;
      case DECIMALNUMBER:
        n35 = jj_consume_token(DECIMALNUMBER);
                               n34 = JTBToolkit.makeNodeToken(n35);
           n1 = new NodeChoice(n34, 16);
        break;
      case LOCATIONID:
        n37 = jj_consume_token(LOCATIONID);
                            n36 = JTBToolkit.makeNodeToken(n37);
           n1 = new NodeChoice(n36, 17);
        break;
      case IDENTIFIER:
        n39 = jj_consume_token(IDENTIFIER);
                            n38 = JTBToolkit.makeNodeToken(n39);
           n1 = new NodeChoice(n38, 18);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n41 = jj_consume_token(0);
      n41.beginColumn++; n41.endColumn++;
      n40 = JTBToolkit.makeNodeToken(n41);
     {if (true) return new LHA(n0,n40);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LHAParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7fffe20,0x7fffe20,};
   }

  /** Constructor with InputStream. */
  public LHAParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LHAParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LHAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LHAParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LHAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LHAParser(LHAParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LHAParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
